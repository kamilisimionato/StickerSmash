import { useState, useRef } from "react";
import { View, StyleSheet, Platform, Image } from "react-native";
import ImageViewer from "@/components/ImageViewer";
import Button from "@/components/Button";
import * as ImagePicker from "expo-image-picker";
import IconButton from "@/components/IconButton";
import CircleButton from "@/components/CircleButton";
import EmojiPicker from "@/components/EmojiPicker";
import { type ImageSource } from 'expo-image'
import EmojiList from "@/components/EmojiList";
import EmojiSticker from "@/components/EmojiSticker";
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import * as MediaLibrary from 'expo-media-library';
import { captureRef } from 'react-native-view-shot';
import domtoimage from 'dom-to-image'

// Replace with your actual Puka image path
const PlaceholderImage = require("@/assets/images/puka-image.png");
// Replace with your Puka icon path
const PukaIcon = require("@/assets/images/puka-icon.png");

// Custom emojis with 600x600 size (replace with your actual emoji images)
const customEmojis = [
  { uri: require('@/assets/emojis/emoji1.png') },
  { uri: require('@/assets/emojis/emoji2.png') },
  { uri: require('@/assets/emojis/emoji3.png') },
  { uri: require('@/assets/emojis/emoji4.png') },
  { uri: require('@/assets/emojis/emoji5.png') },
];

export default function Index() {
  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);
  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);
  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);
  const [pickedEmoji, setPickedEmoji] = useState<ImageSource | undefined>(undefined);
  const [status, requestPermission] = MediaLibrary.usePermissions();
  const imageRef = useRef<View>(null);

  if (status === null) {
    requestPermission();
  }

  const pickImageAsync = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ["images"],
      allowsEditing: true,
      quality: 1,
    });
    if (!result.canceled) {
      setSelectedImage(result.assets[0].uri);
      setShowAppOptions(true);
    } else {
      alert("Você não selecionou nenhuma imagem!");
    }
  };

  const onReset = () => {
    setShowAppOptions(false);
    setPickedEmoji(undefined);
  }

  const onAddSticker = () => {
    setIsModalVisible(true);
  }

  const onModalClose = () => {
    setIsModalVisible(false);
  }

  const onSaveImageAsync = async () => {
    if (Platform.OS !== 'web') {
      try {
        const localUri = await captureRef(imageRef, {
          height: 440,
          quality: 1,
        });

        await MediaLibrary.saveToLibraryAsync(localUri);
        if (localUri) {
          alert("Imagem Salva com Sucesso!");
        }
      } catch (e) {
        console.log(e);
      }
    } else {
      try {
        const dataUrl = await domtoimage.toJpeg(imageRef.current, {
          quality: 0.95,
          width: 320,
          height: 440,
        });

        let link = document.createElement('a');
        link.download = 'puka-smash.jpeg';
        link.href = dataUrl;
        link.click();
      } catch (e) {
        console.log(e);
      }
    }
  }

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.header}>
        <Image source={PukaIcon} style={styles.pukaIcon} />
        <Text style={styles.headerText}>Decore a Puka:</Text>
      </View>
      <View style={styles.imageContainer}>
        <View ref={imageRef} collapsable={false}>
          <ImageViewer
            imgSource={PlaceholderImage}
            selectedImage={selectedImage}
          />
          {
            pickedEmoji &&
            <EmojiSticker imageSize={100} stickerSource={pickedEmoji} />
          }
        </View>
      </View>
      {showAppOptions ? (
        <View style={styles.optionsContainer}>
          <View style={styles.optionRow}>
            <IconButton icon="refresh" label="Resetar" onPress={onReset} />
            <CircleButton onPress={onAddSticker} icon={PukaIcon} />
            <IconButton icon="save-alt" label="Salvar" onPress={onSaveImageAsync} />
          </View>
        </View>
      ) : (
        <View style={styles.footerContainer}>
          <Button
            theme="primary"
            label="Escolher uma foto"
            onPress={pickImageAsync}
            style={styles.pukaButton}
          />
          <Button
            label="Usar esta foto"
            onPress={() => setShowAppOptions(true)}
            style={styles.pukaButton}
          />
        </View>
      )}
      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>
        <EmojiList 
          onSelect={setPickedEmoji} 
          onCloseModal={onModalClose} 
          emojis={customEmojis}
        />
      </EmojiPicker>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#000000",
    alignItems: "center",
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 20,
    marginBottom: 10,
  },
  headerText: {
    color: '#ff0000',
    fontSize: 24,
    fontWeight: 'bold',
    marginLeft: 10,
  },
  pukaIcon: {
    width: 30,
    height: 30,
  },
  imageContainer: {
    flex: 1,
    paddingTop: 20,
  },
  footerContainer: {
    flex: 1 / 3,
    alignItems: "center",
  },
  optionsContainer: {
    position: 'absolute',
    bottom: 80,
  },
  optionRow: {
    alignItems: 'center',
    flexDirection: 'row',
  },
  pukaButton: {
    backgroundColor: '#ff0000',
    borderColor: '#ff0000',
  },
});


TESTE